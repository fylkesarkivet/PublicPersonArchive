// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PersonArchive.Entities.PersonDbContext;
using PersonArchive.Web.DataContexts;
using System;

namespace PersonArchive.Web.Migrations
{
    [DbContext(typeof(PersonDbContext))]
    [Migration("20180716170514_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PersonArchive.Entities.PersonDbContext.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("DataVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(4);

                    b.Property<Guid>("PersonGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeLastUpdated")
                        .ValueGeneratedOnAdd();

                    b.HasKey("PersonId");

                    b.HasIndex("PersonGuid")
                        .IsUnique()
                        .HasName("IX_Person_PersonGuid");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("PersonArchive.Entities.PersonDbContext.PersonDescription", b =>
                {
                    b.Property<int>("PersonDescriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("DataVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeLastUpdated")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Type");

                    b.HasKey("PersonDescriptionId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonDescription");
                });

            modelBuilder.Entity("PersonArchive.Entities.PersonDbContext.PersonFluffyDate", b =>
                {
                    b.Property<int>("PersonFluffyDateId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("DataVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("Day");

                    b.Property<int?>("Month");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeLastUpdated")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Type");

                    b.Property<int?>("Year");

                    b.HasKey("PersonFluffyDateId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonFluffyDate");
                });

            modelBuilder.Entity("PersonArchive.Entities.PersonDbContext.PersonName", b =>
                {
                    b.Property<int>("PersonNameId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("DataVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("First");

                    b.Property<string>("Last");

                    b.Property<string>("Middle");

                    b.Property<int>("NameWeight");

                    b.Property<int>("PersonId");

                    b.Property<Guid>("PersonNameGuid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Prefix");

                    b.Property<string>("Suffix");

                    b.Property<DateTime>("TimeCreated")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("TimeLastUpdated")
                        .ValueGeneratedOnAdd();

                    b.HasKey("PersonNameId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonNameGuid")
                        .IsUnique()
                        .HasName("IX_PersonName_PersonNameGuid");

                    b.ToTable("PersonName");
                });

            modelBuilder.Entity("PersonArchive.Entities.PersonDbContext.PersonDescription", b =>
                {
                    b.HasOne("PersonArchive.Entities.PersonDbContext.Person", "Person")
                        .WithMany("Descriptions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonArchive.Entities.PersonDbContext.PersonFluffyDate", b =>
                {
                    b.HasOne("PersonArchive.Entities.PersonDbContext.Person", "Person")
                        .WithMany("FluffyDates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PersonArchive.Entities.PersonDbContext.PersonName", b =>
                {
                    b.HasOne("PersonArchive.Entities.PersonDbContext.Person", "Person")
                        .WithMany("Names")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
